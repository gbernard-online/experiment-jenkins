node {
    stage('clean') {
        cleanWs()
        sh 'docker container ls --filter=name=alpine --quiet | xargs --no-run-if-empty docker rm --force'
    }

    stage('clone') {
        checkout scm
    }

    def version = "build-${env.BUILD_ID}"
    stage('build') {
        sh "docker buildx build --tag=alpine-gcc:$version ."
    }

    def image = docker.image("alpine-gcc:$version")
    stage('push') {
        docker.withRegistry('https://registry.virtware.top', 'registry.virtware.top') {
            image.push()
            image.push('latest')
        }
    }

    stage('test') {
        image.withRun('--hostname=alpine.local --name=alpine --user=1000:1000 ' +
        '--volume=/opt/docker/jenkins/data/workspace/experiment-docker:/jenkins --workdir=/jenkins',
        'yes') { c ->
            sh 'docker exec alpine hostname'
            sh 'docker exec alpine id'
            sh 'docker exec alpine pwd'
            sh 'docker exec alpine ls -la'
            sh 'docker exec alpine cat README.md'
            sh 'docker exec alpine gcc -o main main.c'
            sh 'docker exec alpine ./main'
        }
    }
}
